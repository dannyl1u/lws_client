/** @client */
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/N6R22nSoF6T
 */
import {
	CardTitle,
	CardDescription,
	CardHeader,
	CardContent,
	Card,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useState } from "react";

export function DeployCard() {
	const [url, setUrl] = useState("");
	const [isDeploying, setIsDeploying] = useState(false);
	const [submitted, setSubmitted] = useState(false);
	const [id, setId] = useState(0);
	const [statuses, setStatuses] = useState([]);

  const statusMessages = {
    "uploading": "Upload files to server ✅",
    "installing": "Run npm run install && npm run build ✅",
    "complete": `Deployment finished 🚀 your site is deloyed at http://${id}.localhost:8002/index.html`
  };

	const handleUrlChange = (event) => {
		setUrl(event.target.value);
	};

	const handleUpload = async () => {
		setIsDeploying(true);
		setSubmitted(true);

		const response = await fetch("http://localhost:8000/upload", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ repoUrl: url }),
		});
		if (response.ok) {
      let lastStatus = "";
			const responseData = await response.json();
			setId(responseData.id); // Set the id from the response

			console.log("Uploaded successfully");
			const statusInterval = setInterval(async () => {
				// fetch status with id
				const statusResponse = await fetch(
					`http://localhost:8000/status?id=${responseData.id}`
				);
				const statusData = await statusResponse.json();
				// check if status data already exists in statuses
				if (statusData.status !== lastStatus) {
          setStatuses((prevStatuses) => [...prevStatuses, statusData.status]); // Append new status
          lastStatus = statusData.status; // Update last status
        }

				if (
					statusData.status === "complete" ||
					statusData.status === "failed"
				) {
					clearInterval(statusInterval);
          setIsDeploying(false);
				}
			}, 100);
		} else {
			console.log("Failed to upload");
		}

	};

	return (
		<Card className="w-full max-w-8xl mx-auto">
			<CardHeader className="pb-0">
				<CardTitle>Deploy React App with Liudogg Web Services 🐕</CardTitle>
				<CardDescription>
					Connect your GitHub repository to go live
				</CardDescription>
			</CardHeader>
			<CardContent>
				<div className="mt-6 space-y-4">
					<div className="flex items-center space-x-4">
						<svg
							className="text-gray-500"
							fill="none"
							height="24"
							viewBox="0 0 24 24"
							width="24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								clip-rule="evenodd"
								d="M12 2C6.477 2 2 6.477 2 12C2 17.523 6.477 22 12 22C17.523 22 22 17.523 22 12C22 6.477 17.523 2 12 2ZM11 17V11H13V17H11ZM11 7V9H13V7H11Z"
								fill="currentColor"
								fill-rule="evenodd"
							/>
						</svg>
						<div className="space-y-2 w-full">
							<Label htmlFor="repository">Repository Clone URL</Label>
							<Input
								id="repository"
								placeholder="Enter your repository clone URL"
								required
								onChange={handleUrlChange}
							/>
						</div>
					</div>
					<Button
						className="w-full"
						onClick={handleUpload}
						disabled={isDeploying}
					>
						Deploy
					</Button>
					{submitted && <div>Preparing for upload 📲</div>}
          {statuses.map((status, index) => (
            <div key={index}>
              <a href={`http://${id}.localhost:8002/index.html`}>
                {statusMessages[status]}
              </a>
            </div>
          ))}
				</div>
			</CardContent>
		</Card>
	);
}
